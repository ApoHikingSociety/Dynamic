-- Variables
local Fluent = loadstring(game:HttpGet("https://raw.githubusercontent.com/ApoHikingSociety/Dynamic/refs/heads/main/Library"))()
local SaveManager = loadstring(game:HttpGet("https://raw.githubusercontent.com/dawid-scripts/Fluent/master/Addons/SaveManager.lua"))()
local InterfaceManager = loadstring(game:HttpGet("https://pastebin.com/raw/467J64rb"))()

local Players = game:GetService("Players")
local LocalPlayer = Players.LocalPlayer

if not LocalPlayer or not LocalPlayer.Character then
    LocalPlayer.CharacterAdded:Wait()
end

local Character = LocalPlayer.Character or LocalPlayer.CharacterAdded:Wait()
local HumanoidRootPart = Character:WaitForChild("HumanoidRootPart")

local RunService = game:GetService("RunService")

local debounce = false
local function onChatted(message)
    if debounce then return end
    debounce = true
    local normalizedMessage = message:lower():gsub("%s+", "")
    if string.find(normalizedMessage, "dynamic") then
        keypress(0xA3)
    end
    task.wait(1)
    debounce = false
end
LocalPlayer.Chatted:Connect(onChatted)

for i, v in pairs(game.Workspace:GetDescendants()) do
    if v:IsA("ProximityPrompt") then
        v.HoldDuration = 0
    end
end

local function isPlayerAlive()
    return Character and Character:FindFirstChild("Humanoid") and Character.Humanoid.Health > 0
end
LocalPlayer.CharacterAdded:Connect(function(newCharacter)
    Character = newCharacter
    HumanoidRootPart = Character:WaitForChild("HumanoidRootPart")
end)
local function executeIfAlive(callback)
    if isPlayerAlive() then
        callback()
    else
        warn("Player is not alive.")
    end
end

--[[local isMovementEnabled = _G.SpeedToggle
local desiredSpeed = _G.SpeedValue
local function getMovementDirection()
    return Character.Humanoid.MoveDirection
end
local function resolveCollisions(currentPosition, nextPosition, moveDirection)
    local halfSize = Vector3.new(1, 2, 1)
    local regionStart = nextPosition - halfSize
    local regionEnd = nextPosition + halfSize
    local region = Region3.new(regionStart, regionEnd)
    local parts = workspace:FindPartsInRegion3WithIgnoreList(region, {Character}, 10)
    for _, part in ipairs(parts) do
        local partPosition = part.Position
        local directionToPart = (partPosition - currentPosition).Unit
        local alignment = directionToPart:Dot(moveDirection.Unit)
        if alignment > 0.5 then
            return currentPosition
        end
    end
    return nextPosition
end
local function onRenderStep()
    if not isMovementEnabled then return end
    local moveDirection = getMovementDirection()
    if moveDirection.Magnitude > 0 then
        local deltaPosition = moveDirection * desiredSpeed * RunService.RenderStepped:Wait()
        local nextPosition = HumanoidRootPart.Position + deltaPosition
        local resolvedPosition = resolveCollisions(HumanoidRootPart.Position, nextPosition, moveDirection)
        HumanoidRootPart.CFrame = CFrame.new(resolvedPosition, resolvedPosition + moveDirection)
    end
end
RunService.RenderStepped:Connect(onRenderStep)]]

-- Main
local Window = Fluent:CreateWindow({
    Title = "Dynamic",
    SubTitle = "The Mimic - Halloween Trials (Part 2)",
    TabWidth = 120,
    Size = UDim2.fromOffset(520, 360),
    Acrylic = false,
    Theme = "Dark",
    MinimizeKey = Enum.KeyCode.RightControl
})
local Tabs = {
    Main = Window:AddTab({ Title = "Main", Icon = "home" }),
    --Player = Window:AddTab({ Title = "Player", Icon = "user" }),
    Visuals = Window:AddTab({ Title = "Visuals", Icon = "eye"}),
    Settings = Window:AddTab({ Title = "Settings", Icon = "settings" })
}
local Options = Fluent.Options

--[[Tabs.Main:AddButton({
    Title = "Win",
    Description = "",
    Callback = function()
        executeIfAlive(function()
            HumanoidRootPart.CFrame = game.Workspace.Candles.Candle.Candles.CFrame
            task.wait(0.18)
            fireproximityprompt(game.Workspace.Candles.Candle.Candles.ProximityPrompt)
            task.wait(0.42)
            HumanoidRootPart.CFrame = game.Workspace.Candles:GetChildren()[2].Candles.CFrame
            task.wait(0.18)
            fireproximityprompt(game.Workspace.Candles:GetChildren()[2].Candles.ProximityPrompt)
            task.wait(0.42)
            HumanoidRootPart.CFrame = game.Workspace.Candles:GetChildren()[3].Candles.CFrame
            task.wait(0.18)
            fireproximityprompt(game.Workspace.Candles:GetChildren()[3].Candles.ProximityPrompt)
            task.wait(0.42)
            HumanoidRootPart.CFrame = game.Workspace.Candles:GetChildren()[4].Candles.CFrame
            task.wait(0.18)
            fireproximityprompt(game.Workspace.Candles:GetChildren()[4].Candles.ProximityPrompt)
        end)
    end
})]]
Tabs.Main:AddButton({
    Title = "Win",
    Description = "",
    Callback = function()
        local TeleportService = game:GetService("TeleportService")
        TeleportService:Teleport(7633631511, LocalPlayer)
    end
})
Tabs.Main:AddButton({
    Title = "Collect Candy",
    Description = "",
    Callback = function()
        executeIfAlive(function()
            local function interactWithItem(item, HumanoidRootPart)
                if item:IsA("MeshPart") and item:FindFirstChild("ProximityPrompt") then
                    HumanoidRootPart.CFrame = item.CFrame
                    task.wait(0.18)
                    fireproximityprompt(item.ProximityPrompt)
                    task.wait(0.38)
                end
            end
            local candyModel = workspace.Candy
            if candyModel and candyModel:FindFirstChild("Candy") then
                HumanoidRootPart.CFrame = candyModel.Candy.CFrame
                task.wait(0.18)
                fireproximityprompt(candyModel.Candy.ProximityPrompt)
                task.wait(0.38)
            elseif not candyModel:FindFirstChild("Candy") then
            end
            if candyModel and candyModel:GetChildren() then
                local candyChildren = candyModel:GetChildren()
                for i, child in ipairs(candyChildren) do
                    if child:IsA("MeshPart") then
                        child.CanCollide = false
                        interactWithItem(child, HumanoidRootPart)
                    end
                end
            end
            HumanoidRootPart.CFrame = CFrame.new(397.464417, 205.024261, -96.7273102, -0.0295444913, 1.17232098e-07, 0.999563456, -4.73236881e-08, 1, -1.1868206e-07, -0.999563456, -5.08094331e-08, -0.0295444913)
        end)
    end
})

--[[local WalkSpeedSection = Tabs.Player:AddSection("WalkSpeed")
WalkSpeedSection:AddToggle("SpeedToggle", {
    Title = "Enabled",
    Default = false
}):OnChanged(function()
    isMovementEnabled = not isMovementEnabled
end)
WalkSpeedSection:AddSlider("SpeedValue", {
    Title = "WalkSpeed",
    Default = 11,
    Min = 11,
    Max = 100,
    Rounding = 0
}):OnChanged(function(Value)
    desiredSpeed = Value
end)]]

local WorldSection = Tabs.Visuals:AddSection("World")
WorldSection:AddToggle("Fullbright", {
    Title = "Fullbright",
    Default = false,
    Callback = function(value)
        local Lighting = game:GetService("Lighting")
        if not Lighting then return end
        if value then
            if not _G.NormalLightingSettings then
                _G.NormalLightingSettings = {
                    Brightness = Lighting.Brightness,
                    ClockTime = Lighting.ClockTime,
                    FogEnd = Lighting.FogEnd,
                    GlobalShadows = Lighting.GlobalShadows,
                    Ambient = Lighting.Ambient
                }
            end
            Lighting.Brightness = 2
            Lighting.ClockTime = 12
            Lighting.FogEnd = 1000000
            Lighting.GlobalShadows = false
            Lighting.Ambient = Color3.fromRGB(255, 255, 255)
        else
            if _G.NormalLightingSettings then
                Lighting.Brightness = _G.NormalLightingSettings.Brightness
                Lighting.ClockTime = _G.NormalLightingSettings.ClockTime
                Lighting.FogEnd = _G.NormalLightingSettings.FogEnd
                Lighting.GlobalShadows = _G.NormalLightingSettings.GlobalShadows
                Lighting.Ambient = _G.NormalLightingSettings.Ambient
            end
        end
    end
})

-- Fluent
SaveManager:SetLibrary(Fluent)
InterfaceManager:SetLibrary(Fluent)

SaveManager:IgnoreThemeSettings()
SaveManager:SetIgnoreIndexes({})

InterfaceManager:SetFolder("FluentScriptHub")
SaveManager:SetFolder("FluentScriptHub/specific-game")
InterfaceManager:BuildInterfaceSection(Tabs.Settings)
SaveManager:BuildConfigSection(Tabs.Settings)

Window:SelectTab(1)

Fluent:Notify({
    Title = "Dynamic",
    Content = "Enjoy <3",
    Duration = 3
})
 
SaveManager:LoadAutoloadConfig()
